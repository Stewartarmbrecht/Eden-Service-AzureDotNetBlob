<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ContentReactor.MyEdenService.Service</name>
    </assembly>
    <members>
        <member name="T:ContentReactor.MyEdenService.Service.Functions">
            <summary>
            Contains the operation for beginning the add of an MyEdenService file.
            </summary>
            <summary>
            Contains the operation for beginning the add of an MyEdenService file.
            </summary>
            <summary>
            Contains the operation for beginning the add of an MyEdenService file.
            </summary>
            <summary>
            Base class for all MyEdenService operations.
            </summary>
            <summary>
            Contains the operation for beginning the add of an MyEdenService file.
            </summary>
            <summary>
            Contains the operation for beginning the add of an MyEdenService file.
            </summary>
            <summary>
            Contains the operation for beginning the add of an MyEdenService file.
            </summary>
            <summary>
            Service that processes MyEdenService events.
            Provides API called by the event grid to process events MyEdenService events.
            </summary>
        </member>
        <member name="M:ContentReactor.MyEdenService.Service.Functions.AddBegin(Microsoft.AspNetCore.Http.HttpRequest,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Creates a placeholder blob and returns the id and URL to upload the actual MyEdenService file.
            </summary>
            <param name="req">The http request to create the MyEdenService blob.</param>
            <param name="log">The logger to use for logging.</param>
            <returns>Id of the new blog and URL to pose the blob to.</returns>
        </member>
        <member name="M:ContentReactor.MyEdenService.Service.Functions.AddComplete(Microsoft.AspNetCore.Http.HttpRequest,Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
            Called after the blob has been uploaded to the container.
            </summary>
            <param name="req">The http request to complete the MyEdenService blob after uploading it to storage.</param>
            <param name="log">The logger to use for logging.</param>
            <param name="id">The id of the blob to complete.</param>
            <returns>Empty success result.</returns>
        </member>
        <member name="M:ContentReactor.MyEdenService.Service.Functions.Delete(Microsoft.AspNetCore.Http.HttpRequest,Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
            Deletes an MyEdenService note from the repository.
            </summary>
            <param name="req">The request.</param>
            <param name="log">Logger used for logging.</param>
            <param name="id">The id of the MyEdenService file to delete.</param>
            <returns>No content result if successful.</returns>
        </member>
        <member name="F:ContentReactor.MyEdenService.Service.Functions.CategoryIdMetadataName">
            <summary>
            Name of the meta data field that tracks the id of the category the MyEdenService file is organized under.
            </summary>
        </member>
        <member name="F:ContentReactor.MyEdenService.Service.Functions.UserIdMetadataName">
            <summary>
            Name of the metadata field that holds the user id.
            </summary>
        </member>
        <member name="F:ContentReactor.MyEdenService.Service.Functions.MyEdenServiceBlobContainerName">
            <summary>
            Name of the MyEdenService blob container.
            </summary>
        </member>
        <member name="F:ContentReactor.MyEdenService.Service.Functions.JsonContentType">
            <summary>
            Gets or sets the JsonContentType string value.
            </summary>
        </member>
        <member name="F:ContentReactor.MyEdenService.Service.Functions.UnhandledExceptionError">
            <summary>
            Gets the default message for an unhandled exception.
            </summary>
        </member>
        <member name="F:ContentReactor.MyEdenService.Service.Functions.TranscriptMetadataName">
            <summary>
            Name of meta data field that holds the transcript.
            </summary>
        </member>
        <member name="F:ContentReactor.MyEdenService.Service.Functions.TranscriptPreviewLength">
            <summary>
            Length of the transcript preview.
            </summary>
        </member>
        <member name="M:ContentReactor.MyEdenService.Service.Functions.#ctor(ContentReactor.Common.UserAuthentication.IUserAuthenticationService,ContentReactor.Common.Blobs.IBlobRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:ContentReactor.MyEdenService.Service.Functions"/> class.
            </summary>
            <param name="userAuthenticationService">The user authentication service to use to identify the calling user.</param>
            <param name="blobRepository">The blob respository to use for storing MyEdenService files.</param>
        </member>
        <member name="M:ContentReactor.MyEdenService.Service.Functions.#ctor(ContentReactor.Common.UserAuthentication.IUserAuthenticationService,ContentReactor.Common.Blobs.IBlobRepository,ContentReactor.Common.Events.IEventGridSubscriberService,ContentReactor.Common.Events.IEventGridPublisherService,ContentReactor.MyEdenService.Service.IMyEdenServiceTranscriptionService)">
            <summary>
            Initializes a new instance of the <see cref="T:ContentReactor.MyEdenService.Service.Functions"/> class.
            </summary>
            <param name="userAuthenticationService">The user authentication service to use.</param>
            <param name="blobRepository">The blob respository to use for storing MyEdenService files.</param>
            <param name="eventGridSubscriberService">The event grid subscriber service to use for processing event grid events.</param>
            <param name="eventGridPublisherService">The event grid publisher service to use for publishing events.</param>
            <param name="MyEdenServiceTranscriptionService">The MyEdenService transcription service to use for transcribing MyEdenService files.</param>
        </member>
        <member name="P:ContentReactor.MyEdenService.Service.Functions.UserAuthenticationService">
            <summary>
            Gets the service that will determine who called the API.
            </summary>
            <value>An instance of the <see cref="T:ContentReactor.Common.UserAuthentication.IUserAuthenticationService"/> interface.</value>
        </member>
        <member name="P:ContentReactor.MyEdenService.Service.Functions.BlobRepository">
            <summary>
            Gets the service that interacts with the blob store.
            </summary>
            <value>An instance of the <see cref="T:ContentReactor.Common.Blobs.IBlobRepository"/> interface.</value>
        </member>
        <member name="P:ContentReactor.MyEdenService.Service.Functions.EventGridPublisherService">
            <summary>
            Gets the event grid publisher service.
            </summary>
            <value>An instance of the <see cref="T:ContentReactor.Common.Events.IEventGridPublisherService"/> interface.</value>
        </member>
        <member name="P:ContentReactor.MyEdenService.Service.Functions.EventGridSubscriberService">
            <summary>
            Gets the event grid subscriber service to use to process event grid events.
            </summary>
            <value>An instnace of the <see cref="T:ContentReactor.Common.Events.IEventGridSubscriberService"/> interface.</value>
        </member>
        <member name="P:ContentReactor.MyEdenService.Service.Functions.MyEdenServiceTranscriptionService">
            <summary>
            Gets the transcription service to use to transcribe MyEdenService files.
            </summary>
            <value>An instnace of the <see cref="T:ContentReactor.MyEdenService.Service.IMyEdenServiceTranscriptionService"/> interface.</value>
        </member>
        <member name="M:ContentReactor.MyEdenService.Service.Functions.Get(Microsoft.AspNetCore.Http.HttpRequest,Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
            Gets metadata and URL to download MyEdenService file.
            </summary>
            <param name="req">The request.</param>
            <param name="log">Logger used for logging.</param>
            <param name="id">The id of the MyEdenService file to get the data for.</param>
            <returns>Metadata about the MyEdenService file and the URL to download.</returns>
        </member>
        <member name="M:ContentReactor.MyEdenService.Service.Functions.GetList(Microsoft.AspNetCore.Http.HttpRequest,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Gets a list of MyEdenService notes for a user.
            </summary>
            <param name="req">The request.</param>
            <param name="log">Logger used for logging.</param>
            <returns>Collection of MyEdenService note summarites. An instance of the <see cref="T:ContentReactor.MyEdenService.Service.GetListItem"/> class.</returns>
        </member>
        <member name="M:ContentReactor.MyEdenService.Service.Functions.HealthCheck(Microsoft.AspNetCore.Http.HttpRequest,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Performs a health check for the function.
            While empty now can be used to perform checks against
            predefined thresholds to help alert against cost overruns
            or certain types of client behavior that was blocked.
            </summary>
            <param name="req">Request sent to the azure function.</param>
            <param name="log">Logger to use for logging information or errors.</param>
            <returns>Results of the health check.</returns>
        </member>
        <member name="F:ContentReactor.MyEdenService.Service.Functions.EventGridSubscriptionValidationHeaderKey">
            <summary>
            The name of the header key that signifies the request is a
            validation request and not an actual request for the function
            to execute.
            </summary>
        </member>
        <member name="M:ContentReactor.MyEdenService.Service.Functions.UpdateTranscript(Microsoft.AspNetCore.Http.HttpRequest,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Subscribes to the MyEdenServiceCreated event.
            Transcribes the MyEdenService file using Congnitive Services Speech API.
            </summary>
            <param name="req">The request from the Event Grid to process event for a new MyEdenService file.</param>
            <param name="log">The logger to use to log information.</param>
            <returns>Returns an instance of the <see cref="T:Microsoft.AspNetCore.Mvc.OkResult"/> class if all is ok.
            If the MyEdenService file is not found it returns an instance of the <see cref="T:Microsoft.AspNetCore.Mvc.NotFoundResult"/> class.</returns>
        </member>
        <member name="T:ContentReactor.MyEdenService.Service.AddBeginResponse">
            <summary>
            Includes the Id and url to upload the new MyEdenService file to.
            </summary>
        </member>
        <member name="P:ContentReactor.MyEdenService.Service.AddBeginResponse.Id">
            <summary>
            Gets or sets the id of the new MyEdenService blob.
            </summary>
            <value>String value for a guid.</value>
        </member>
        <member name="P:ContentReactor.MyEdenService.Service.AddBeginResponse.UploadUrl">
            <summary>
            Gets or sets the url that has the shared access key to upload a file to the newly created blob.
            </summary>
            <value>The string value of the URL to upload the MyEdenService file.</value>
        </member>
        <member name="T:ContentReactor.MyEdenService.Service.AddCompleteRequest">
            <summary>
            Includes the Id and url to upload the new MyEdenService file to.
            </summary>
        </member>
        <member name="P:ContentReactor.MyEdenService.Service.AddCompleteRequest.CategoryId">
            <summary>
            Gets or sets the category for the MyEdenService file.
            </summary>
            <value>The string value of the category id.</value>
        </member>
        <member name="T:ContentReactor.MyEdenService.Service.GetResponse">
            <summary>
            Provides meta data and access url to download an MyEdenService file.
            </summary>
        </member>
        <member name="P:ContentReactor.MyEdenService.Service.GetResponse.Id">
            <summary>
            Gets or sets id of the MyEdenService file.
            </summary>
        </member>
        <member name="P:ContentReactor.MyEdenService.Service.GetResponse.MyEdenServiceUrl">
            <summary>
            Gets or sets url to download MyEdenService file.
            </summary>
        </member>
        <member name="P:ContentReactor.MyEdenService.Service.GetResponse.Transcript">
            <summary>
            Gets or sets transcript of the MyEdenService file.
            </summary>
        </member>
        <member name="T:ContentReactor.MyEdenService.Service.GetListItem">
            <summary>
            MyEdenService note metadata.
            </summary>
        </member>
        <member name="P:ContentReactor.MyEdenService.Service.GetListItem.Id">
            <summary>
            Gets or sets id of the MyEdenService note.
            </summary>
        </member>
        <member name="P:ContentReactor.MyEdenService.Service.GetListItem.Preview">
            <summary>
            Gets or sets preview of the MyEdenService not transcription.
            </summary>
        </member>
        <member name="T:ContentReactor.MyEdenService.Service.GetListResponse">
            <summary>
            List of MyEdenService note summaries.
            </summary>
        </member>
        <member name="T:ContentReactor.MyEdenService.Service.Startup">
            <summary>
            Initialized at that startup of the function.
            </summary>
        </member>
        <member name="M:ContentReactor.MyEdenService.Service.Startup.Configure(Microsoft.Azure.Functions.Extensions.DependencyInjection.IFunctionsHostBuilder)">
            <summary>
            Configures services for the function.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Azure.Functions.Extensions.DependencyInjection.IFunctionsHostBuilder"/> instance that providers access to building in services.</param>
        </member>
        <member name="T:ContentReactor.MyEdenService.Service.MyEdenServiceTranscriptionService">
            <summary>
            Transcribes MyEdenService blob files using the Microsoft Congnitive Services
            speech to text api.
            </summary>
        </member>
        <member name="M:ContentReactor.MyEdenService.Service.MyEdenServiceTranscriptionService.GetMyEdenServiceTranscriptFromCognitiveServicesAsync(System.IO.Stream)">
            <summary>
            Transcribes MyEdenService blob files using the Microsoft Congnitive Services
            speech to text api.
            </summary>
            <param name="MyEdenServiceBlobStream">The stream that feeds the MyEdenService blob file.</param>
            <returns>The transcription of the MyEdenService file.</returns>
        </member>
        <member name="M:ContentReactor.MyEdenService.Service.MyEdenServiceTranscriptionService.CreateMyEdenServiceTranscriptRequest(System.IO.Stream)">
            <summary>
            Creates the api request to submit the MyEdenService file to the
            Microsoft Cognitive Services Speech api.
            </summary>
            <param name="MyEdenServiceBlobStream">MyEdenService file to submit to the api.</param>
            <returns>The http request that will post the file to the api.</returns>
        </member>
        <member name="M:ContentReactor.MyEdenService.Service.MyEdenServiceTranscriptionService.ProcessMyEdenServiceTranscriptResponse(System.String)">
            <summary>
            Gets the transcription from the http response body.
            </summary>
            <param name="responseString">The string from the http response body.</param>
            <returns>The display value of the best match transcription for the MyEdenService file.</returns>
        </member>
        <member name="T:ContentReactor.MyEdenService.Service.IMyEdenServiceTranscriptionService">
            <summary>
            Submits an MyEdenService blob to the Cognitive Services Speech API to have it transcribed.
            </summary>
        </member>
        <member name="M:ContentReactor.MyEdenService.Service.IMyEdenServiceTranscriptionService.GetMyEdenServiceTranscriptFromCognitiveServicesAsync(System.IO.Stream)">
            <summary>
            Submits an MyEdenService blob to the Cognitive Services Speech API to have it transcribed.
            </summary>
            <param name="MyEdenServiceBlobStream">The MyEdenService file blob stream to translate.</param>
            <returns>The MyEdenService transcription.</returns>
        </member>
    </members>
</doc>
